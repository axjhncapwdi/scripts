# Who is using this script have the 100% of responsabilities and aftermath about their actions.

# (@u@) scripted by Skripto (@YourAnonSkripto) (@u@)

#      " Keyboard is more powerful than a nuke. "

import requests, re, os, colorama, time, warnings, optparse, platform
from urllib import parse
from bs4 import BeautifulSoup
warnings.filterwarnings('ignore')

if platform.system() != 'Windows':
    os.system('clear')
else:
    os.system('cls')

class parameters:
    def __init__(self):
        global TARGET_URL

        PARSER = optparse.OptionParser()
        PARSER.add_option('--url', metavar='http/https:// example.ex', action='store', dest='URL', help='Enter the URL whitin the http/https:// !')
        PARSER.add_option('--crawler', action='store_true', dest='CRAWL', help='Enter this option to show Crawler output.')
        PARSER.add_option('--onlyone', action='store_true', dest='OOLINK', help='Enter this option if you need to scan one only page.')
        self.OPTS, ARGS = PARSER.parse_args()

        self.check_parameters()
        TARGET_URL = self.OPTS.URL
        

    def check_parameters(self):
        global ifPRINT, oneLINK

        if not self.OPTS.URL:
            print(colorama.Back.RED+'\nPlease type "--help" for more informations. <Specify the protocol "--url"> !'+colorama.Back.RESET+'\n')
            exit()

        if not 'http' in self.OPTS.URL:
            print(colorama.Back.RED+'\nPlease type "--help" for more informations. <Enter the full link within http/https://> !'+colorama.Back.RESET+'\n')
            exit()

        if self.OPTS.CRAWL:
            ifPRINT = True

        if self.OPTS.OOLINK:
            oneLINK = True  

TARGET_URL = ''
ifPRINT = False
oneLINK = False

class VulnScanner:
    def __init__(self, URL):
        self.SE = requests.Session()
        self.URL = URL
        self.LINKLIST = []
        self.FORMVULNLIST = []
        self.LINKVULNLIST = []

    def get_hrefs(self, URL):
        try:
            URL_RESPONSE = self.SE.get(URL)
            return re.findall('(?:href=")(.*?)"', URL_RESPONSE.content.decode(errors='ignore'))
        except KeyboardInterrupt:
            if platform.system() != 'Windows':
                os.system('clear')
            else:
                os.system('cls')
            exit()
            
    def crawler(self, URL, ifPRINT):
        for LINK in self.get_hrefs(URL):
            LINK = parse.urljoin(URL, LINK)

            if '#' in LINK:
                LINK = LINK.split('#')[0]

            if not 'logout' in LINK:
                if self.URL in LINK and LINK not in self.LINKLIST:
                    self.LINKLIST.append(LINK)
                    if ifPRINT:
                        print('  '+colorama.Fore.LIGHTBLACK_EX+str(len(self.LINKLIST))+colorama.Fore.RESET+' '+LINK)
                    self.crawler(LINK, ifPRINT)

    def analyze_form(self, URL):
        HTML = self.SE.get(URL)
        HTML_CODE = BeautifulSoup(HTML.content.decode(errors='ignore'),'html.parser')
        return HTML_CODE.findAll('form')
 
    def send_form(self, FORM, URL, INPUT_VALUE):

        DATA = {}

        ACTION = FORM.get('action')
        URL = parse.urljoin(URL, ACTION)
        METHOD = FORM.get('method')
        INPUTLIST = FORM.findAll('input')

        for INPUT in INPUTLIST:
            NAME = INPUT.get('name')
            TYPE = INPUT.get('type')
            VALUE = INPUT.get('value')
            if TYPE == 'text' or TYPE == None:
                VALUE = INPUT_VALUE

            DATA[NAME] = VALUE

        if METHOD == 'post':
            return self.SE.post(URL, data=DATA).content.decode()
        return self.SE.get(URL, params=DATA).content.decode()

    def XSS_vuln_inlink(self, URL):
        SCRIPT = "<ScriPt>alert('')</scRipt>"
        #"&lt;SCript&gt;alert('')&lt;/scRipT&gt;"
        URL = URL.replace('=', '='+SCRIPT)
        RESPONSE = self.SE.get(URL)
        return SCRIPT.encode() in RESPONSE.content

    def XSS_vuln_inform(self, FORM, URL):
        SCRIPT = "<ScriPt>alert('')</scRipt>"
        RESPONSE = self.send_form(FORM, URL, SCRIPT)
        return SCRIPT in RESPONSE

    def run(self, CRAWL, oneLINK):
        print(colorama.Fore.LIGHTBLACK_EX+'\n\t~S'+colorama.Fore.WHITE+'k'+colorama.Fore.LIGHTBLACK_EX+'ripto'
            +colorama.Fore.LIGHTBLUE_EX+' XSS vulnerabilities '+colorama.Fore.WHITE+'+'+colorama.Fore.LIGHTBLUE_EX+' Crawler'+colorama.Fore.LIGHTBLACK_EX+'\t('
            +colorama.Fore.LIGHTRED_EX+'@'+colorama.Fore.LIGHTBLACK_EX+'u'+colorama.Fore.LIGHTRED_EX+'@'+colorama.Fore.LIGHTBLACK_EX+')')
        time.sleep(1.5)

        if oneLINK:
            print('\n\n '+colorama.Fore.LIGHTBLUE_EX+'XSS scanning '+colorama.Fore.RESET+' '+self.URL)
            time.sleep(1)
            FORMS = self.analyze_form(self.URL)
            print(colorama.Fore.LIGHTBLACK_EX+'\n\n -[ '+colorama.Fore.LIGHTBLUE_EX+'XSS vulnerabilities'+colorama.Fore.LIGHTBLACK_EX+' ]-'+colorama.Fore.RESET)
            time.sleep(1)
            if '=' in self.URL:
                if self.XSS_vuln_inlink(self.URL):
                    print(colorama.Fore.LIGHTBLACK_EX+'\n  ['+colorama.Fore.LIGHTRED_EX+'*'+colorama.Fore.LIGHTBLACK_EX+']'+colorama.Fore.LIGHTRED_EX+' Link vulnerability'+colorama.Fore.RESET+': '+self.URL)
            for FORM in FORMS:
                FORMNUM = str(FORMS.index(FORM)+1)
                if self.XSS_vuln_inform(FORM, self.URL):
                    FORM = str(FORM).replace('\n','\n    ')
                    print(colorama.Fore.LIGHTBLACK_EX+'\n  ['+colorama.Fore.LIGHTRED_EX+'*'+colorama.Fore.LIGHTBLACK_EX+'] '+colorama.Fore.RESET+FORMNUM+colorama.Fore.LIGHTRED_EX+' Form vulnerability'+colorama.Fore.RESET+':\n\n    '+str(FORM))
            print()
            exit()

        if CRAWL:
            print(colorama.Fore.LIGHTBLACK_EX+'\n\n -[ '+colorama.Fore.LIGHTBLUE_EX+'Crawler'+colorama.Fore.LIGHTBLACK_EX+' ]- \n'+colorama.Fore.RESET)
            time.sleep(1)
        else:
            print('\n\n '+colorama.Fore.LIGHTBLUE_EX+'Crawling '+colorama.Fore.RESET+' '+self.URL)
            time.sleep(1)
        self.crawler(self.URL, CRAWL)
        print(colorama.Fore.LIGHTBLACK_EX+'\n\n -[ '+colorama.Fore.LIGHTBLUE_EX+'XSS vuln scanner'+colorama.Fore.LIGHTBLACK_EX+' ]-')
        time.sleep(1)

        for LINK in self.LINKLIST:
            FORMS = self.analyze_form(LINK)
            for FORM in FORMS:
                print(colorama.Fore.LIGHTBLACK_EX+'\n  ['+colorama.Fore.LIGHTGREEN_EX+'+'+colorama.Fore.LIGHTBLACK_EX+']'+colorama.Fore.LIGHTGREEN_EX+' Testing form in'+colorama.Fore.RESET+' '+LINK)
                if self.XSS_vuln_inform(FORM, LINK):
                    self.FORMVULNLIST.append(FORM)
            if '=' in LINK:
                print(colorama.Fore.LIGHTBLACK_EX+'\n  ['+colorama.Fore.LIGHTGREEN_EX+'+'+colorama.Fore.LIGHTBLACK_EX+']'+colorama.Fore.LIGHTGREEN_EX+' Testing'+colorama.Fore.RESET+' '+LINK)
                if self.XSS_vuln_inlink(LINK):
                    self.LINKVULNLIST.append(LINK)
            
        print(colorama.Fore.LIGHTBLACK_EX+'\n\n -[ '+colorama.Fore.LIGHTBLUE_EX+'XSS vulnerabilities'+colorama.Fore.LIGHTBLACK_EX+' ]-'+colorama.Fore.RESET)
        time.sleep(1)
        for LINK in self.LINKVULNLIST:
            print(colorama.Fore.LIGHTBLACK_EX+'\n  ['+colorama.Fore.LIGHTRED_EX+'*'+colorama.Fore.LIGHTBLACK_EX+']'+colorama.Fore.LIGHTRED_EX+' Link vulnerability'+colorama.Fore.RESET+': '+LINK)
        for FORM in self.FORMVULNLIST:
            FORMNUM = str(self.FORMVULNLIST.index(FORM)+1)
            FORM = str(FORM).replace('\n','\n    ')
            print(colorama.Fore.LIGHTBLACK_EX+'\n  ['+colorama.Fore.LIGHTRED_EX+'*'+colorama.Fore.LIGHTBLACK_EX+'] '+colorama.Fore.RESET+FORMNUM+colorama.Fore.LIGHTRED_EX+' Form vulnerability'+colorama.Fore.RESET+':\n\n    '+str(FORM))

        print()

parameters()

SESSION = VulnScanner(TARGET_URL)

# In case of logins:
#   DATA = {'username':'admin','password':'password','Login':'submit'}
#   SESSION.SE.post('http://127.0.0.1/dvwa/login.php', data=DATA)

SESSION.run(ifPRINT, oneLINK)
